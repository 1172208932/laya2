var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**This class is automatically generated by LayaAirIDE, please do not make any modifications. */


var _RankView = require("./scripts/common/RankService/RankView");

var _RankView2 = _interopRequireDefault(_RankView);

var _RankCell = require("./scripts/common/RankService/RankCell");

var _RankCell2 = _interopRequireDefault(_RankCell);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var GameConfig = function () {
    function GameConfig() {
        _classCallCheck(this, GameConfig);
    }

    _createClass(GameConfig, null, [{
        key: "init",
        value: function init() {
            //注册Script或者Runtime引用
            var reg = Laya.ClassUtils.regClass;
            reg("scripts/common/RankService/RankView.js", _RankView2.default);
            reg("scripts/common/RankService/RankCell.js", _RankCell2.default);
        }
    }]);

    return GameConfig;
}();

exports.default = GameConfig;

GameConfig.width = 640;
GameConfig.height = 1136;
GameConfig.scaleMode = "fixedwidth";
GameConfig.screenMode = "none";
GameConfig.alignV = "top";
GameConfig.alignH = "left";
GameConfig.startScene = "scenes/common/Rank/ODCRankView.scene";
GameConfig.sceneRoot = "";
GameConfig.debug = false;
GameConfig.stat = false;
GameConfig.physicsDebug = false;
GameConfig.exportSceneToJson = true;

GameConfig.init();

},{"./scripts/common/RankService/RankCell":3,"./scripts/common/RankService/RankView":4}],2:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _GameConfig = require("./GameConfig");

var _GameConfig2 = _interopRequireDefault(_GameConfig);

var _DataCenter = require("./scripts/utils/DataCenter");

var _DataCenter2 = _interopRequireDefault(_DataCenter);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Main = function () {
	function Main() {
		_classCallCheck(this, Main);

		Laya.isWXPosMsg = true;
		Laya.isWXOpenDataContext = true;
		Laya.init(750, 1334);
		Laya.stage.scaleMode = Laya.Stage.SCALE_FIXED_WIDTH;
		Laya.stage.screenMode = Laya.Stage.SCREEN_VERTICAL;
		Laya.stage.alignV = Laya.Stage.ALIGN_MIDDLE;
		Laya.stage.alignH = Laya.Stage.ALIGN_CENTER;
		//兼容微信不支持加载scene后缀场景
		Laya.URL.exportSceneToJson = true;
	}

	_createClass(Main, [{
		key: "loadScene",
		value: function loadScene(cb) {
			Laya.loader.load('res/atlas/remote/rank.atlas', Laya.Handler.create(this, function (data) {
				Laya.Scene.open('scenes/common/Rank/ODCRankView.scene', true, null, Laya.Handler.create(this, function (scene) {
					cb(scene);
				}));
			}));
		}
	}]);

	return Main;
}();

//激活启动类


var main = new Main();

if (window.wx) {
	wx.onMessage(function (data) {
		switch (data.type) {
			case 'showRankView':
				_DataCenter2.default.requestFriendList(function (list, info) {
					main.loadScene(function (scene) {
						scene.receiveData(list, info);
					});
				});
				break;
			case 'showRankGroupView':
				var shareTicket = data.shareTicket;
				_DataCenter2.default.requestGroupList(shareTicket, function (list, info) {
					main.loadScene(function (scene) {
						scene.receiveData(list, info);
					});
				});
				break;
		}
	});
}

},{"./GameConfig":1,"./scripts/utils/DataCenter":5}],3:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var RankCell = function (_Laya$Box) {
    _inherits(RankCell, _Laya$Box);

    function RankCell() {
        _classCallCheck(this, RankCell);

        return _possibleConstructorReturn(this, (RankCell.__proto__ || Object.getPrototypeOf(RankCell)).apply(this, arguments));
    }

    _createClass(RankCell, [{
        key: 'onAwake',
        value: function onAwake() {
            this.imgIcon = this.getChildByName('imgIcon');
            this.lblRank = this.getChildByName('lblRank');
            this.lblName = this.getChildByName('lblName');
            this.lblCount = this.getChildByName('lblCount');
        }
    }, {
        key: 'setItem',
        value: function setItem(item) {
            this.lblRank.text = item.rank;
            this.imgIcon.skin = item.avatarUrl;
            this.lblName.text = item.nickname;
            this.lblCount.text = item.detail;
        }
    }]);

    return RankCell;
}(Laya.Box);

exports.default = RankCell;

},{}],4:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var RankView = function (_Laya$View) {
    _inherits(RankView, _Laya$View);

    function RankView() {
        _classCallCheck(this, RankView);

        return _possibleConstructorReturn(this, (RankView.__proto__ || Object.getPrototypeOf(RankView)).apply(this, arguments));
    }

    _createClass(RankView, [{
        key: "onAwake",
        value: function onAwake() {
            this.configListView();
        }
    }, {
        key: "configListView",
        value: function configListView() {
            var listView = this.listView;
            listView.vScrollBarSkin = "";
            listView.renderHandler = Laya.Handler.create(this, function (cell, index) {
                var item = listView.array[index];
                cell.setItem(item);
                if (index == 0) {
                    cell.lblRank.color = "#ff7e00";
                    cell.lblRank.bold = true;
                } else if (index == 1 || index == 2) {
                    cell.lblRank.color = "#404040";
                    cell.lblRank.bold = true;
                } else {
                    cell.lblRank.color = "#7c7c7c";
                    cell.lblRank.bold = false;
                }
            }, null, false);
        }
    }, {
        key: "reloadData",
        value: function reloadData(list) {
            this.listView.repeatY = list.length > 5 ? 5 : list.length;
            this.listView.array = list;
            this.listView.refresh();
        }
    }, {
        key: "reloadMyRankViewData",
        value: function reloadMyRankViewData(data) {
            this.myRankView.setItem(data);
        }
    }, {
        key: "receiveData",
        value: function receiveData(list, info) {
            this.reloadData(list);
            this.reloadMyRankViewData(info);
        }
    }]);

    return RankView;
}(Laya.View);

exports.default = RankView;

},{}],5:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _OpenDataCtx = require('./OpenDataCtx');

var _OpenDataCtx2 = _interopRequireDefault(_OpenDataCtx);

var _Util = require('./Util');

var _Util2 = _interopRequireDefault(_Util);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var DataCenter = function DataCenter() {
    _classCallCheck(this, DataCenter);
};
/**当前用户数据 */


exports.default = DataCenter;
DataCenter.friendsInfo = null;
/**自己用户信息 */
DataCenter.myInfo = null;
/**当前用户详细信息 */
DataCenter.user = null;
/**
 * KVList:[
 *    {key:"score",value:"1000"},
 *    {key:"maxScore",value:"1000"}
 *    {key:"detail",value:"详情"},
 *    {key:"update_time",value:"123456789"},
 * ]
 */
DataCenter.makeData = function (data, cb) {
    var _this = this;

    var list = this.handleList(data);
    this.requestUserData(function (info) {
        info.rank = _this.findUserRank(info, list);
        info.detail = _this.findUserDetail(info);
        cb && cb(list, info);
    });
};
DataCenter.requestFriendList = function (cb) {
    var _this2 = this;

    _OpenDataCtx2.default.getFriendData(function (res) {
        _this2.makeData(res.data, cb);
    });
};
DataCenter.requestGroupList = function (shareTicket, cb) {
    var _this3 = this;

    _OpenDataCtx2.default.getGroupData(shareTicket, function (res) {
        _this3.makeData(res.data, cb);
    });
};
/**向服务器更新【最高分】 */
DataCenter.updateMaxScore = function (params) {
    if (!params[_OpenDataCtx2.default.SCORE_KEY]) {
        console.error("必须指定用户的分数");
        return;
    }
    var kvList = [];

    var center = DataCenter.center;
    var myInfo = center.myInfo;
    if (!myInfo) {
        return;
    }
    var score = params[_OpenDataCtx2.default.SCORE_KEY];
    var maxScore = myInfo[_OpenDataCtx2.default.SCORE_MAX_KEY];
    maxScore = Math.max(maxScore, score);

    kvList.push({
        key: _OpenDataCtx2.default.SCORE_KEY,
        value: maxScore + ""
    });
    kvList.push({
        key: _OpenDataCtx2.default.SCORE_MAX_KEY,
        value: maxScore + ""
    });

    if (params[_OpenDataCtx2.default.DES_KEY]) {
        kvList.push({
            key: _OpenDataCtx2.default.DES_KEY,
            value: params[_OpenDataCtx2.default.DES_KEY]
        });
    } else {
        kvList.push({
            key: _OpenDataCtx2.default.DES_KEY,
            value: maxScore + params['unit']
        });
    }
    _OpenDataCtx2.default.set(kvList);
};
/**获取个人信息 */
DataCenter.requestMyInfo = function (cb) {
    var _this4 = this;

    if (this.user) {
        cb && cb(this.user);
    }
    _OpenDataCtx2.default.getMyInfo(function (res) {
        var user = res.data[0];
        user.nickName = _Util2.default.formatName(user.nickName);
        user.avatarUrl = _Util2.default.makeIcon(user.avatarUrl);
        _this4.user = user;
        cb && cb(_this4.user);
    });
};
DataCenter.requestUserData = function (cb) {
    this.requestMyInfo(function (user) {
        _OpenDataCtx2.default.getUserData(function (res) {
            var info = {
                openid: "",
                nickname: user.nickName,
                avatarUrl: user.avatarUrl,
                KVDataList: res.KVDataList
            };
            cb && cb(info);
        });
    });
};

DataCenter.handleList = function (list) {
    var _this5 = this;

    var result = [];
    for (var i = 0, length = list.length; i < length; i++) {
        var info = list[i];
        var kvList = info.KVDataList;
        if (!kvList || kvList.length <= 0) {
            console.error("当前数据不存在指定的KVList:\n");
            console.log(JSON.stringify(info));
            continue;
        }
        // Util.flat(info, 'KVDataList')

        // if (!info[OpenDataCtx.SCORE_KEY]) { continue }
        // if (!info[OpenDataCtx.DES_KEY]) {
        //     info[OpenDataCtx.DES_KEY] = info[OpenDataCtx.SCORE_KEY]
        // }

        info.nickname = _Util2.default.formatName(info.nickname);
        info.avatarUrl = _Util2.default.makeIcon(info.avatarUrl);
        result.push(info);
    }
    result.forEach(function (item, idx) {
        item.rank = 'NO.' + (idx + 1);
        item.detail = _this5.findUserDetail(item);
    });
    result.sort(function (lhs, rhs) {
        return rhs.KVDataList[_OpenDataCtx2.default.SCORE_INDEX].value - lhs.KVDataList[_OpenDataCtx2.default.SCORE_INDEX].value;
    });
    return result;
};
DataCenter.findUserRank = function (user, list) {
    var userRank = -1;
    for (var i = 0; i < list.length; i++) {
        var info = list[i];
        if (info.avatarUrl == user.avatarUrl || info.nickname == user.nickname) {
            userRank = i;
        }
        info.rank = "NO." + (i + 1);
    }
    return userRank == -1 ? "未上榜" : "NO." + (userRank + 1);
};
DataCenter.findUserDetail = function (info) {
    var detail = '';
    if (info.KVDataList.length == 0){

    } else if (info.KVDataList.length > _OpenDataCtx2.default.DETAIL_INDEX) {
        detail = info.KVDataList[_OpenDataCtx2.default.DETAIL_INDEX].value || info.KVDataList[_OpenDataCtx2.default.SCORE_INDEX].value || '';
    } else {
        detail = info.KVDataList[_OpenDataCtx2.default.SCORE_INDEX].value || '';
    }
    return detail;
};

},{"./OpenDataCtx":6,"./Util":7}],6:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var OpenDataCtx = function OpenDataCtx() {
    _classCallCheck(this, OpenDataCtx);
};
/**描述信息，用于界面展示 */


exports.default = OpenDataCtx;
OpenDataCtx.DES_KEY = "detail";
/**用户数据更新时间 */
OpenDataCtx.UPDATE_TIME_KEY = 'updateTime';
/**用户当前获取的分数（这个很重要，用于排序） */
OpenDataCtx.SCORE_KEY = 'score';
/**用户的最高分 */
OpenDataCtx.SCORE_MAX_KEY = 'maxScore';
OpenDataCtx.keys = [OpenDataCtx.SCORE_KEY, OpenDataCtx.DES_KEY, OpenDataCtx.SCORE_MAX_KEY, OpenDataCtx.UPDATE_TIME_KEY];
OpenDataCtx.SCORE_INDEX = OpenDataCtx.keys.indexOf(OpenDataCtx.SCORE_KEY);
OpenDataCtx.DETAIL_INDEX = OpenDataCtx.keys.indexOf(OpenDataCtx.DES_KEY);

/**获取好友信息 */
OpenDataCtx.getFriendData = function (cb) {
    wx.getFriendCloudStorage({
        keyList: this.keys,
        success: cb
    });
};
/**获取群用户信息 */
OpenDataCtx.getGroupData = function (shareTicket, cb) {
    wx.getGroupCloudStorage({
        shareTicket: shareTicket,
        keyList: this.keys,
        success: cb
    });
};
/**获取用户数据 */
OpenDataCtx.getUserData = function (cb) {
    wx.getUserCloudStorage({
        keyList: this.keys,
        success: cb
    });
};
/**获取用户信息 */
OpenDataCtx.getUserInfo = function (users, cb) {
    wx.getUserInfo({
        openIdList: users,
        lang: "zh_CN",
        success: cb
    });
};
/**获取自己的信息 */
OpenDataCtx.getMyInfo = function (cb) {
    this.getUserInfo(["selfOpenId"], cb);
};

/**设置用户数据 */
OpenDataCtx.set = function (kvList) {
    //1、格式化数据
    kvList.forEach(function (element) {
        var value = element.value;
        if (typeof value != 'string') {
            console.error('\u5F53\u524D\u4F20\u5165\u6570\u636E\u683C\u5F0F\u6709\u8BEF:');
            console.error(JSON.stringify(element));
            element.value = String(value);
        }
    });
    var time = Date.now();
    var timeInterval = Number(time) / 1000;
    kvList.push({ key: this.UPDATE_TIME_KEY, value: timeInterval + "" });
    console.log('OD | SET | ' + JSON.stringify(kvList));
    wx.setUserCloudStorage({
        KVDataList: kvList,
        success: function success(res) {
            console.log("OD | SET | SUC | " + JSON.stringify(res));
        },
        fail: function fail(res) {
            console.log("OD | SET | FAIL | " + JSON.stringify(res));
        }
    });
};

/**移除用户数据 */
OpenDataCtx.remove = function (keys) {
    wx.removeUserCloudStorage({
        keyList: keys,
        success: function success(res) {
            console.log("OD | REMOVE | SUC | " + JSON.stringify(res));
        },
        fail: function fail(res) {
            console.log("OD | REMOVE | FAIL | " + JSON.stringify(res));
        }
    });
};

},{}],7:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Util = function Util() {
    _classCallCheck(this, Util);
};

exports.default = Util;

Util.makeIcon = function (url) {
    var items = url.split("/") || [];
    if (items.length > 1) {
        var str = items[items.length - 1];
        items.pop();
        items.push("96");
        return items.join('/');
    }
    return this + "";
};
Util.formatName = function (name) {
    var n = 10;
    var str = name;
    var r = /[^\x00-\xff]/g;
    if (str.replace(r, "mm").length <= n) {
        return str + "";
    }
    var m = Math.floor(n / 2);
    for (var i = m; i < str.length; i++) {
        if (str.substring(0, i).replace(r, "mm").length >= n) {
            return str.substring(0, i) + "...";
        }
    }
    return str;
};
/**将obj的key的值，从一个数组，映射为一个对象 */
Util.flat = function (obj, key, map) {
    var list = obj[key];
    if (!list) {
        return;
    }
    list.forEach(function (element) {
        var key = element['key'];
        if (key) {
            if (obj[key]) {
                console.error(obj + "\u542B\u6709\u6307\u5B9A\u7684" + key);
            } else {
                obj[key] = element['value'];
            }
        } else {
            console.error(element + "\u4E0D\u5B58\u5728\u6307\u5B9A\u7684key");
        }
    });
};

},{}]},{},[2])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
